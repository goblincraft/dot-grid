{"mappings":"AEAA;IACI,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,CAAC,EAAE,MAAM,CAAC;CACnB;AECD,OAAO,MAAM;eA0BS,MAAM,eAAe,UAAU,KAAG,IAAI;CAexD,CAAC","sources":["src/src/enums/DefaultDotOptions.ts","src/src/enums/Errors.ts","src/src/interfaces/IDotOptions.ts","src/src/interfaces/IGridSettings.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,"import { DefaultDotOptions } from \"./enums/DefaultDotOptions\";\nimport { Errors } from \"./enums/Errors\";\nimport { DotOptions } from \"./interfaces/IDotOptions\";\nimport { GridSettings } from \"./interfaces/IGridSettings\";\n\nexport const DotGrid = (() => {\n\n    let _options: DotOptions;\n    let _gridSettings: GridSettings;\n    let _canvas: HTMLCanvasElement;\n    let _ctx: CanvasRenderingContext2D;\n    let cols: number;\n    let rows: number;\n\n    function _configureGridSettings(): void {\n        _gridSettings = {\n            width: _canvas.offsetWidth,\n            height: _canvas.offsetHeight\n        }\n    }   \n\n    function _validateDotOptions(dotOptions?: DotOptions): DotOptions {\n        const defaultSize: number = DefaultDotOptions.SIZE;\n        const defaultColor: string = DefaultDotOptions.COLOR;\n        let options = dotOptions;\n        if (!options) {\n            options = { size: defaultSize, color: defaultColor }\n        }\n        return options;\n    }\n\n    function draw(id: string, dotOptions?: DotOptions): void {\n        const el = document.getElementById(id);\n        _options = _validateDotOptions(dotOptions);\n        if (el && el instanceof HTMLCanvasElement) {\n            _canvas = el;\n            _configureGridSettings();\n        } else {\n            throw Error(Errors.NO_CANVAS);\n        }\n    }\n\n    return {\n        draw: draw\n    }\n\n})();"],"names":[],"version":3,"file":"types.d.ts.map","sourceRoot":"../"}