{"mappings":"AEAA;IACI,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;CACjB;AEED,OAAO,MAAM;eAiBS,MAAM,eAAe,UAAU,KAAG,IAAI;CAaxD,CAAC","sources":["src/src/enums/DefaultDotOptions.ts","src/src/enums/Errors.ts","src/src/interfaces/IDotOptions.ts","src/src/interfaces/IGridSettings.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,"import { DefaultDotOptions } from \"./enums/DefaultDotOptions\";\nimport { Errors } from \"./enums/Errors\";\nimport { DotOptions } from \"./interfaces/IDotOptions\";\nimport { GridSettings } from \"./interfaces/IGridSettings\";\n\nexport const DotGrid = (() => {\n\n    let _options: DotOptions;\n    let _gridSettings: GridSettings;\n    let canvas: HTMLCanvasElement;\n    let ctx: CanvasRenderingContext2D;\n\n    function validateDotOptions(dotOptions?: DotOptions): DotOptions {\n        const defaultSize: number = DefaultDotOptions.SIZE;\n        const defaultColor: string = DefaultDotOptions.COLOR;\n        let options = dotOptions;\n        if (!options) {\n            options = { size: defaultSize, color: defaultColor }\n        }\n        return options;\n    }\n\n    function draw(id: string, dotOptions?: DotOptions): void {\n        _options = validateDotOptions(dotOptions);\n        if (document.getElementById(id)) {\n\n        } else {\n            throw Error(Errors.NO_CANVAS);\n        }\n    }\n\n    return {\n        draw: draw\n    }\n\n})();"],"names":[],"version":3,"file":"types.d.ts.map","sourceRoot":"../"}