{"mappings":";;;;;;ACAO,IAAA,AAAK,mEAAA;;;WAAA;;;;ACAL,IAAA,AAAK,mEAAA;;WAAA;;;;AFKL,MAAM,4CAAU,AAAC,CAAA;IAEpB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IAEJ,SAAS,mBAAmB,UAAuB;QAC/C,MAAM,cAAsB,CAAA,GAAA,yCAAgB,EAAE,IAAI;QAClD,MAAM,eAAuB,CAAA,GAAA,yCAAgB,EAAE,KAAK;QACpD,IAAI,UAAU;QACd,IAAI,CAAC,SACD,UAAU;YAAE,MAAM;YAAa,OAAO;QAAa;QAEvD,OAAO;IACX;IAEA,SAAS,KAAK,EAAU,EAAE,UAAuB;QAC7C,MAAM,KAAK,SAAS,cAAc,CAAC;QACnC,WAAW,mBAAmB;QAC9B,IAAI,MAAM,cAAc,mBACpB,UAAU;aAEV,MAAM,MAAM,CAAA,GAAA,yCAAK,EAAE,SAAS;IAEpC;IAEA,OAAO;QACH,MAAM;IACV;AAEJ,CAAA","sources":["src/index.ts","src/enums/DefaultDotOptions.ts","src/enums/Errors.ts"],"sourcesContent":["import { DefaultDotOptions } from \"./enums/DefaultDotOptions\";\nimport { Errors } from \"./enums/Errors\";\nimport { DotOptions } from \"./interfaces/IDotOptions\";\nimport { GridSettings } from \"./interfaces/IGridSettings\";\n\nexport const DotGrid = (() => {\n\n    let _options: DotOptions;\n    let _gridSettings: GridSettings;\n    let _canvas: HTMLCanvasElement;\n    let _ctx: CanvasRenderingContext2D;\n\n    function validateDotOptions(dotOptions?: DotOptions): DotOptions {\n        const defaultSize: number = DefaultDotOptions.SIZE;\n        const defaultColor: string = DefaultDotOptions.COLOR;\n        let options = dotOptions;\n        if (!options) {\n            options = { size: defaultSize, color: defaultColor }\n        }\n        return options;\n    }\n\n    function draw(id: string, dotOptions?: DotOptions): void {\n        const el = document.getElementById(id);\n        _options = validateDotOptions(dotOptions);\n        if (el && el instanceof HTMLCanvasElement) {\n            _canvas = el;\n        } else {\n            throw Error(Errors.NO_CANVAS);\n        }\n    }\n\n    return {\n        draw: draw\n    }\n\n})();","export enum DefaultDotOptions {\n    SIZE = 10,\n    COLOR = \"#000000\"\n}","export enum Errors {\n    NO_CANVAS = \"No valid canvas found from given ID.\"\n}"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}