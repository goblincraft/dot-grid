{"mappings":"ACAO,IAAA,AAAK,mEAAA;;;WAAA;;;;ACAL,IAAA,AAAK,mEAAA;;WAAA;;;;AFKL,MAAM,4CAAU,AAAC,CAAA;IAEpB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IAEJ,SAAS;QACL,OAAO,SAAS,MAAM,GAAG,SAAS,MAAM,GAAG,SAAS,IAAI;IAC5D;IAEA,SAAS,SAAS,CAAS,EAAE,CAAS,GAEtC;IAEA,SAAS;QACL,MAAM,SAAS;QACf,IAAI,IAAI;QACR,IAAI,IAAI;QACR,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IACvB,KAAK;IAEb;IAEA,SAAS;QACL,QAAQ,KAAK,KAAK,CAAC,cAAc,MAAM,GAAG;IAC9C;IAEA,SAAS;QACL,QAAQ,KAAK,KAAK,CAAC,cAAc,KAAK,GAAG;IAC7C;IAEA,SAAS;QACL,YAAY,SAAS,IAAI,GAAI,mBAAmB;IACpD;IAEA,SAAS;QACL,gBAAgB;YACZ,OAAO,QAAQ,WAAW;YAC1B,QAAQ,QAAQ,YAAY;QAChC;IACJ;IAEA,SAAS,oBAAoB,UAAuB;QAChD,MAAM,cAAsB,CAAA,GAAA,yCAAgB,EAAE,IAAI;QAClD,MAAM,eAAuB,CAAA,GAAA,yCAAgB,EAAE,KAAK;QACpD,IAAI,UAAU;QACd,IAAI,CAAC,SACD,UAAU;YAAE,MAAM;YAAa,OAAO;YAAc,QAAQ;QAAY;QAE5E,OAAO;IACX;IAEA,SAAS,KAAK,EAAU,EAAE,UAAuB;QAC7C,MAAM,KAAK,SAAS,cAAc,CAAC;QACnC,IAAI,MAAM,cAAc,mBAAmB;YACvC,UAAU;YACV,WAAW,oBAAoB;YAC/B;YACA;YACA;YACA;YACA;QACJ,OACI,MAAM,MAAM,CAAA,GAAA,yCAAK,EAAE,SAAS;IAEpC;IAEA,OAAO;QACH,MAAM;IACV;AAEJ,CAAA","sources":["src/index.ts","src/enums/DefaultDotOptions.ts","src/enums/Errors.ts"],"sourcesContent":["import { DefaultDotOptions } from \"./enums/DefaultDotOptions\";\nimport { Errors } from \"./enums/Errors\";\nimport { DotOptions } from \"./interfaces/IDotOptions\";\nimport { GridSettings } from \"./interfaces/IGridSettings\";\n\nexport const DotGrid = (() => {\n\n    let _options: DotOptions;\n    let _gridSettings: GridSettings;\n    let _canvas: HTMLCanvasElement;\n    let _ctx: CanvasRenderingContext2D;\n    let _cellSize: number;\n    let _cols: number;\n    let _rows: number;\n\n    function _computeMargin(): number {\n        return _options.margin ? _options.margin : _options.size;\n    }\n\n    function _drawDot(x: number, y: number): void {\n\n    }\n\n    function _drawGrid(): void {\n        const margin = _computeMargin();\n        let x = 0;\n        let y = 0;\n        for (let i = 0; i < _cols; i++) {\n            x += margin;\n        }\n    }\n\n    function _determineNumOfRows(): void {\n        _rows = Math.floor(_gridSettings.height / _cellSize);\n    }\n\n    function _determineNumOfCols(): void {\n        _cols = Math.floor(_gridSettings.width / _cellSize);\n    }\n\n    function _computeCellSize(): void {\n        _cellSize = _options.size + (_computeMargin() * 2);\n    }\n\n    function _configureGridSettings(): void {\n        _gridSettings = {\n            width: _canvas.offsetWidth,\n            height: _canvas.offsetHeight\n        }\n    }   \n\n    function _validateDotOptions(dotOptions?: DotOptions): DotOptions {\n        const defaultSize: number = DefaultDotOptions.SIZE;\n        const defaultColor: string = DefaultDotOptions.COLOR;\n        let options = dotOptions;\n        if (!options) {\n            options = { size: defaultSize, color: defaultColor, margin: defaultSize }\n        }\n        return options;\n    }\n\n    function draw(id: string, dotOptions?: DotOptions): void {\n        const el = document.getElementById(id);\n        if (el && el instanceof HTMLCanvasElement) {\n            _canvas = el;\n            _options = _validateDotOptions(dotOptions);\n            _configureGridSettings();\n            _computeCellSize();\n            _determineNumOfCols();\n            _determineNumOfRows();\n            _drawGrid();\n        } else {\n            throw Error(Errors.NO_CANVAS);\n        }\n    }\n\n    return {\n        draw: draw\n    }\n\n})();","export enum DefaultDotOptions {\n    SIZE = 10,\n    COLOR = \"#000000\"\n}","export enum Errors {\n    NO_CANVAS = \"No valid canvas found from given ID.\"\n}"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}